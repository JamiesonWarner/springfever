{"version":3,"sources":["webpack:///webpack/bootstrap 5e7648ae4cf806076fc2?32ab","webpack:///./test/tests.ts","webpack:///./app/perceptron.ts?2f76"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD;AAClD,mDAAkD;AAClD,sDAAqD;AACrD,sDAAqD;AACrD,sDAAqD;AACrD,sDAAqD;AACrD,sDAAqD;AACrD,sDAAqD;AACrD,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,EAAC;;;;;;;;ACjDD;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,cAAc;AAC9C;AACA;AACA;AACA,wBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,oBAAoB;AAC3C;AACA;AACA,2BAA0B,yBAAyB;AACnD,+BAA8B,4BAA4B;AAC1D,mCAAkC,+BAA+B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD","file":"test.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5e7648ae4cf806076fc2\n **/","\"use strict\";\nvar perceptron_1 = require(\"../app/perceptron\");\ndescribe(\"perceptron\", function () {\n    it(\"initializes to expected values\", function () {\n        var p = new perceptron_1.Perceptron(4, 2, 4);\n        // expect(p.weights.length).toEqual(2);\n        // expect(p.weights[0].length).toEqual(2); // 2 nodes in hidden layer\n        // expect(p.weights[1].length).toEqual(4); // 4 nodes in output layer\n        // expect(p.weights[0][0].length).toEqual(5); // 4 inputs + constant\n        // expect(p.weights[0][1].length).toEqual(5); // 4 inputs + constant\n        // expect(p.weights[1][0].length).toEqual(3); // 2 inputs + constant\n        // expect(p.weights[1][1].length).toEqual(3); // 2 inputs + constant\n        // expect(p.weights[1][2].length).toEqual(3); // 2 inputs + constant\n        // expect(p.weights[1][3].length).toEqual(3); // 2 inputs + constant\n    });\n    it(\"gets reasonable net values\", function () {\n        var p = new perceptron_1.Perceptron(2, 2, 1);\n        p.trainer.XOR();\n        expect(p.activate([0, 0]) < 0.2).toEqual(true);\n        expect(p.activate([0, 1]) > 0.8);\n        expect(p.activate([1, 0]) > 0.8);\n        expect(p.activate([1, 1]) < 0.2);\n        // p.weights[0][0][0] = 1.0;\n        // p.weights[0][0][1] = 0.6;\n        // p.weights[0][0][2] = 0.6;\n        // p.weights[0][1][0] = 1.0;\n        // p.weights[0][1][1] = 1.1;\n        // p.weights[0][1][2] = 1.1;\n        // p.weights[1][0][0] = 1.0;\n        // p.weights[1][0][1] = -2;\n        // p.weights[1][0][2] = 1.1;\n        console.log('vallls');\n        // console.log(p.activate([0,0]));\n        // console.log(p.activate([0,1]));\n        // console.log(p.activate([1,0]));\n        // console.log(p.activate([1,1]));\n        expect(true).toEqual(true);\n        // xor function\n        // var p = new Perceptron(1, 1);\n        // expect(p.weights.length).toEqual(2);\n        // expect(p.weights[0].length).toEqual(2);\n        // expect(p.weights[1].length).toEqual(4);\n    });\n    it(\"perturbs correctly\", function () {\n        var p = new perceptron_1.Perceptron(2, 2, 1);\n        // expect(p.net([0, 0])).toEqual(0);\n        // p.perturb(1);\n        // expect(p.net([0, 0])).not.toEqual(0);\n    });\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./test/tests.ts\n ** module id = 0\n ** module chunks = 1\n **/","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Perceptron = (function (_super) {\n    __extends(Perceptron, _super);\n    function Perceptron() {\n        var nnodes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            nnodes[_i - 0] = arguments[_i];\n        }\n        _super.apply(this, nnodes);\n    }\n    Perceptron.prototype.perturb = function (amount) {\n        // perturb every weight by ~amount\n        if (amount === void 0) { amount = 1.0; }\n        // iterate through layers connections\n        var connections = this.layers.input.connectedTo[0].list\n            .concat(connections = this.layers.hidden[0].connectedTo[0].list);\n        for (var i = 0; i < connections.length; ++i) {\n            var connection = connections[i];\n            connection.weight += 2 * Math.random() * amount - amount;\n        }\n        // iterate through neurons\n        var neurons = this.layers.input.list\n            .concat(this.layers.hidden[0].list)\n            .concat(this.layers.output.list);\n        for (var i = 0; i < neurons.length; ++i) {\n            neurons[i].bias += 2 * Math.random() * amount - amount;\n        }\n        // for (var i = 0; i < this.weights.length; ++i) {\n        //     for (var j = 0; j < this.weights[i].length; ++j) {\n        //         for (var k = 0; k < this.weights[i][j].length; ++k) {\n        //             this.weights[i][j][k] += 2 * Math.random() * amount - amount;\n        //         }\n        //     }\n        // }\n    };\n    return Perceptron;\n}(Architect.Perceptron));\nexports.Perceptron = Perceptron;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/perceptron.ts\n ** module id = 8\n ** module chunks = 0 1\n **/"],"sourceRoot":""}