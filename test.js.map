{"version":3,"sources":["webpack:///webpack/bootstrap d153fafcf50bf6de24f2?70a6","webpack:///./test/tests.ts","webpack:///./app/perceptron.ts?2f76"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C;AAC/C,gDAA+C;AAC/C,mDAAkD;AAClD,mDAAkD;AAClD,mDAAkD;AAClD,mDAAkD;AAClD,mDAAkD;AAClD,mDAAkD;AAClD,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,EAAC;;;;;;;;AC5CD;AACA;AACA;AACA;AACA,yBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA,wBAAuB,aAAa;AACpC;AACA;AACA,4BAA2B,YAAY;AACvC,mEAAkE;AAClE,gCAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA,wBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,yBAAyB;AAChD,4BAA2B,4BAA4B;AACvD,gCAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,cAAc;AAC9C;AACA,wBAAuB,yBAAyB;AAChD,4BAA2B,4BAA4B;AACvD,gCAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,uBAAuB;AACjD,+BAA8B,sBAAsB,OAAO;AAC3D;AACA;AACA,2BAA0B,+BAA+B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,2BAA2B;AAClD;AACA;AACA,4BAA2B,yBAAyB;AACpD;AACA;AACA;AACA,gCAA+B,oBAAoB;AACnD;AACA;AACA,mCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD","file":"test.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d153fafcf50bf6de24f2\n **/","\"use strict\";\nvar perceptron_1 = require(\"../app/perceptron\");\ndescribe(\"perceptron\", function () {\n    it(\"initializes to expected values\", function () {\n        var p = new perceptron_1.Perceptron(4, 2, 4);\n        expect(p.weights.length).toEqual(2);\n        expect(p.weights[0].length).toEqual(2); // 2 nodes in hidden layer\n        expect(p.weights[1].length).toEqual(4); // 4 nodes in output layer\n        expect(p.weights[0][0].length).toEqual(5); // 4 inputs + constant\n        expect(p.weights[0][1].length).toEqual(5); // 4 inputs + constant\n        expect(p.weights[1][0].length).toEqual(3); // 2 inputs + constant\n        expect(p.weights[1][1].length).toEqual(3); // 2 inputs + constant\n        expect(p.weights[1][2].length).toEqual(3); // 2 inputs + constant\n        expect(p.weights[1][3].length).toEqual(3); // 2 inputs + constant\n    });\n    it(\"gets reasonable net values\", function () {\n        var p = new perceptron_1.Perceptron(2, 2, 1);\n        p.weights[0][0][0] = 1.0;\n        p.weights[0][0][1] = 0.6;\n        p.weights[0][0][2] = 0.6;\n        p.weights[0][1][0] = 1.0;\n        p.weights[0][1][1] = 1.1;\n        p.weights[0][1][2] = 1.1;\n        p.weights[1][0][0] = 1.0;\n        p.weights[1][0][1] = -2;\n        p.weights[1][0][2] = 1.1;\n        console.log('vallls');\n        console.log(p.net([0, 0]));\n        console.log(p.net([0, 1]));\n        console.log(p.net([1, 0]));\n        console.log(p.net([1, 1]));\n        expect(true).toEqual(true);\n        // xor function\n        // var p = new Perceptron(1, 1);\n        // expect(p.weights.length).toEqual(2);\n        // expect(p.weights[0].length).toEqual(2);\n        // expect(p.weights[1].length).toEqual(4);\n    });\n    it(\"perturbs correctly\", function () {\n        var p = new perceptron_1.Perceptron(2, 2, 1);\n        expect(p.net([0, 0])).toEqual(0);\n        // p.perturb(1);\n        // expect(p.net([0, 0])).not.toEqual(0);\n    });\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./test/tests.ts\n ** module id = 0\n ** module chunks = 1\n **/","\"use strict\";\nvar Perceptron = (function () {\n    function Perceptron() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        var nlayers = args.length;\n        this.weights = new Array(nlayers - 1);\n        for (var i = 1; i < nlayers; ++i) {\n            var nnodes = args[i], prevNodes = args[i - 1];\n            this.weights[i - 1] = new Array(nnodes);\n            for (var j = 0; j < nnodes; ++j) {\n                this.weights[i - 1][j] = new Array(prevNodes + 1); // input + constant\n                for (var k = 0; k < prevNodes + 1; ++k) {\n                    this.weights[i - 1][j][k] = 0;\n                }\n            }\n        }\n        this.netValues = new Array(nlayers - 1);\n        for (var i = 1; i < nlayers; ++i) {\n            this.netValues[i - 1] = new Array(args[i]);\n        }\n    }\n    Perceptron.prototype.clone = function () {\n        // assume weight equivilancy\n        var p = new (Function.prototype.bind.apply(Perceptron, this.nlayers));\n        for (var i = 0; i < this.weights.length; ++i) {\n            for (var j = 0; j < this.weights[i].length; ++j) {\n                for (var k = 0; k < this.weights[i][j].length; ++k) {\n                    p.weights[i][j][k] = this.weights[i][j][k];\n                }\n            }\n        }\n        return p;\n    };\n    Perceptron.prototype.perturb = function (amount) {\n        if (amount === void 0) { amount = 1.0; }\n        // perturb every weight by ~amount\n        for (var i = 0; i < this.weights.length; ++i) {\n            for (var j = 0; j < this.weights[i].length; ++j) {\n                for (var k = 0; k < this.weights[i][j].length; ++k) {\n                    this.weights[i][j][k] += 2 * Math.random() * amount - amount;\n                }\n            }\n        }\n    };\n    Perceptron.prototype.net = function (input) {\n        // var mtx = this.type.signalMatrix;\n        // for (var i = 0; i < newSignals.length; i++) {\n        //     for (var j = 0; j < Fluids.N_SIGNALS; j++) { // first SIGNALS columns of matrix...\n        //         newSignals[i] += this.fluids.vector[j+Fluids.SIGNALS_START] * mtx[i][j];\n        //     }\n        //     for (j = 0; j < this.fluids.vector.length; ++j) {\n        //         newSignals[i] += this.fluids.vector[j] * mtx[i][j+this.signals.vector.length];\n        //     }\n        // }\n        // iterate through each layer of weights\n        var inlayer = input;\n        var outlayer;\n        for (var i = 0; i < this.netValues.length; ++i) {\n            outlayer = this.netValues[i];\n            var layerWeights = this.weights[i];\n            for (var j = 0; j < layerWeights.length; ++j) {\n                // weights for the node\n                var weights = layerWeights[j];\n                var sum = weights[0];\n                for (var k = 0; k < inlayer.length; ++k) {\n                    sum += inlayer[k] * weights[k + 1];\n                }\n                outlayer[j] = sum; // VectorUtils.activatorFunction(sum);\n            }\n            inlayer = this.netValues[i];\n        }\n        console.log('computing net funciton', this.netValues, this.weights, outlayer);\n        return outlayer.slice();\n    };\n    return Perceptron;\n}());\nexports.Perceptron = Perceptron;\nvar VectorUtils = (function () {\n    function VectorUtils() {\n    }\n    VectorUtils.l2norm = function (arr) {\n        var n = 0;\n        for (var i = 0; i < arr.length; ++i) {\n            n += arr[i] * arr[i];\n        }\n        return Math.sqrt(n);\n    };\n    VectorUtils.l1norm = function (arr) {\n        var n = 0;\n        for (var i = 0; i < arr.length; ++i) {\n            n += arr[i];\n        }\n        return n;\n    };\n    VectorUtils.distanceToPlane = function (fluids, activator) {\n        var normW = this.l2norm(activator.w);\n        var d = 0;\n        for (var i = 0; i < length; ++i) {\n            d += fluids[i] * activator[i];\n        }\n        d += activator.b;\n        return d / normW;\n    };\n    /*\n    Sigmoid activator.\n    Returns value from 0 to 1 given f from -inf to inf.\n    */\n    VectorUtils.activatorFunction = function (v) {\n        return 1 / (1 + Math.exp(-v));\n    };\n    return VectorUtils;\n}());\nexports.VectorUtils = VectorUtils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/perceptron.ts\n ** module id = 7\n ** module chunks = 0 1\n **/"],"sourceRoot":""}